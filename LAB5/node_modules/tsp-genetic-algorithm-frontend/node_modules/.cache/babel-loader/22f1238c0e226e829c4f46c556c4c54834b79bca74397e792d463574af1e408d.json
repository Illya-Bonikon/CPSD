{"ast":null,"code":"// Рівні логування\nexport const LogLevel = {\n  DEBUG: 'DEBUG',\n  INFO: 'INFO',\n  WARNING: 'WARNING',\n  ERROR: 'ERROR'\n};\n\n// Кольори для різних рівнів логування\nconst LOG_COLORS = {\n  [LogLevel.DEBUG]: '#6c757d',\n  // сірий\n  [LogLevel.INFO]: '#0d6efd',\n  // синій\n  [LogLevel.WARNING]: '#ffc107',\n  // жовтий\n  [LogLevel.ERROR]: '#dc3545' // червоний\n};\n\n// Клас для логу\nclass LogEntry {\n  constructor(level, message, data = null, timestamp = new Date()) {\n    this.level = level;\n    this.message = message;\n    this.data = data;\n    this.timestamp = timestamp;\n    this.id = Math.random().toString(36).substr(2, 9);\n  }\n  toString() {\n    const time = this.timestamp.toLocaleTimeString();\n    const dataStr = this.data ? `\\n${JSON.stringify(this.data, null, 2)}` : '';\n    return `[${time}] ${this.level}: ${this.message}${dataStr}`;\n  }\n  toHTML() {\n    const time = this.timestamp.toLocaleTimeString();\n    const dataStr = this.data ? `<pre>${JSON.stringify(this.data, null, 2)}</pre>` : '';\n    return `\n            <div class=\"log-entry log-${this.level.toLowerCase()}\" data-id=\"${this.id}\">\n                <span class=\"log-time\">[${time}]</span>\n                <span class=\"log-level\">${this.level}</span>\n                <span class=\"log-message\">${this.message}</span>\n                ${dataStr}\n            </div>\n        `;\n  }\n}\n\n// Синглтон для логування\nclass Logger {\n  constructor() {\n    this.logs = [];\n    this.maxLogs = 1000; // максимальна кількість збережених логів\n    this.listeners = new Set();\n    this.minLevel = LogLevel.DEBUG; // мінімальний рівень логування\n  }\n\n  // Додавання нового логу\n  _addLog(level, message, data = null) {\n    if (this._shouldLog(level)) {\n      const log = new LogEntry(level, message, data);\n      this.logs.push(log);\n\n      // Обмеження кількості логів\n      if (this.logs.length > this.maxLogs) {\n        this.logs.shift();\n      }\n\n      // Сповіщення слухачів\n      this._notifyListeners(log);\n\n      // Виведення в консоль\n      this._consoleLog(level, message, data);\n    }\n  }\n\n  // Перевірка чи потрібно логувати\n  _shouldLog(level) {\n    const levels = Object.values(LogLevel);\n    return levels.indexOf(level) >= levels.indexOf(this.minLevel);\n  }\n\n  // Виведення в консоль\n  _consoleLog(level, message, data) {\n    const color = LOG_COLORS[level];\n    const style = `color: ${color}; font-weight: bold;`;\n    if (data) {\n      console.log(`%c${level}: ${message}`, style, data);\n    } else {\n      console.log(`%c${level}: ${message}`, style);\n    }\n  }\n\n  // Сповіщення слухачів\n  _notifyListeners(log) {\n    this.listeners.forEach(listener => listener(log));\n  }\n\n  // Методи логування\n  debug(message, data = null) {\n    this._addLog(LogLevel.DEBUG, message, data);\n  }\n  info(message, data = null) {\n    this._addLog(LogLevel.INFO, message, data);\n  }\n  warning(message, data = null) {\n    this._addLog(LogLevel.WARNING, message, data);\n  }\n  error(message, data = null) {\n    this._addLog(LogLevel.ERROR, message, data);\n  }\n\n  // Отримання всіх логів\n  getLogs() {\n    return [...this.logs];\n  }\n\n  // Очищення логів\n  clearLogs() {\n    this.logs = [];\n    this._notifyListeners(null); // сповіщення про очищення\n  }\n\n  // Встановлення мінімального рівня логування\n  setMinLevel(level) {\n    if (Object.values(LogLevel).includes(level)) {\n      this.minLevel = level;\n    }\n  }\n\n  // Підписка на оновлення логів\n  subscribe(listener) {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener); // функція для відписки\n  }\n\n  // Фільтрація логів за рівнем\n  filterByLevel(level) {\n    return this.logs.filter(log => log.level === level);\n  }\n\n  // Пошук по логах\n  search(query) {\n    const searchStr = query.toLowerCase();\n    return this.logs.filter(log => log.message.toLowerCase().includes(searchStr) || log.data && JSON.stringify(log.data).toLowerCase().includes(searchStr));\n  }\n}\n\n// Експортуємо єдиний екземпляр логера\nexport const logger = new Logger();\n\n// Хук для використання логера в компонентах\nexport const useLogger = () => {\n  const log = (level, message, data = null) => {\n    logger.addLog(level, message, data);\n  };\n  return {\n    log,\n    info: (message, data) => log(LogLevel.INFO, message, data),\n    warn: (message, data) => log(LogLevel.WARNING, message, data),\n    error: (message, data) => log(LogLevel.ERROR, message, data),\n    debug: (message, data) => log(LogLevel.DEBUG, message, data),\n    getLogs: logger.getLogs,\n    clearLogs: logger.clearLogs,\n    getLogsByLevel: logger.filterByLevel,\n    getRecentLogs: logger.getLogs\n  };\n};","map":{"version":3,"names":["LogLevel","DEBUG","INFO","WARNING","ERROR","LOG_COLORS","LogEntry","constructor","level","message","data","timestamp","Date","id","Math","random","toString","substr","time","toLocaleTimeString","dataStr","JSON","stringify","toHTML","toLowerCase","Logger","logs","maxLogs","listeners","Set","minLevel","_addLog","_shouldLog","log","push","length","shift","_notifyListeners","_consoleLog","levels","Object","values","indexOf","color","style","console","forEach","listener","debug","info","warning","error","getLogs","clearLogs","setMinLevel","includes","subscribe","add","delete","filterByLevel","filter","search","query","searchStr","logger","useLogger","addLog","warn","getLogsByLevel","getRecentLogs"],"sources":["C:/files/dev/CPSD/LAB5/frontend/src/services/logger.js"],"sourcesContent":["// Рівні логування\r\nexport const LogLevel = {\r\n    DEBUG: 'DEBUG',\r\n    INFO: 'INFO',\r\n    WARNING: 'WARNING',\r\n    ERROR: 'ERROR'\r\n};\r\n\r\n// Кольори для різних рівнів логування\r\nconst LOG_COLORS = {\r\n    [LogLevel.DEBUG]: '#6c757d',    // сірий\r\n    [LogLevel.INFO]: '#0d6efd',     // синій\r\n    [LogLevel.WARNING]: '#ffc107',  // жовтий\r\n    [LogLevel.ERROR]: '#dc3545'     // червоний\r\n};\r\n\r\n// Клас для логу\r\nclass LogEntry {\r\n    constructor(level, message, data = null, timestamp = new Date()) {\r\n        this.level = level;\r\n        this.message = message;\r\n        this.data = data;\r\n        this.timestamp = timestamp;\r\n        this.id = Math.random().toString(36).substr(2, 9);\r\n    }\r\n\r\n    toString() {\r\n        const time = this.timestamp.toLocaleTimeString();\r\n        const dataStr = this.data ? `\\n${JSON.stringify(this.data, null, 2)}` : '';\r\n        return `[${time}] ${this.level}: ${this.message}${dataStr}`;\r\n    }\r\n\r\n    toHTML() {\r\n        const time = this.timestamp.toLocaleTimeString();\r\n        const dataStr = this.data ? `<pre>${JSON.stringify(this.data, null, 2)}</pre>` : '';\r\n        return `\r\n            <div class=\"log-entry log-${this.level.toLowerCase()}\" data-id=\"${this.id}\">\r\n                <span class=\"log-time\">[${time}]</span>\r\n                <span class=\"log-level\">${this.level}</span>\r\n                <span class=\"log-message\">${this.message}</span>\r\n                ${dataStr}\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n\r\n// Синглтон для логування\r\nclass Logger {\r\n    constructor() {\r\n        this.logs = [];\r\n        this.maxLogs = 1000; // максимальна кількість збережених логів\r\n        this.listeners = new Set();\r\n        this.minLevel = LogLevel.DEBUG; // мінімальний рівень логування\r\n    }\r\n\r\n    // Додавання нового логу\r\n    _addLog(level, message, data = null) {\r\n        if (this._shouldLog(level)) {\r\n            const log = new LogEntry(level, message, data);\r\n            this.logs.push(log);\r\n            \r\n            // Обмеження кількості логів\r\n            if (this.logs.length > this.maxLogs) {\r\n                this.logs.shift();\r\n            }\r\n\r\n            // Сповіщення слухачів\r\n            this._notifyListeners(log);\r\n\r\n            // Виведення в консоль\r\n            this._consoleLog(level, message, data);\r\n        }\r\n    }\r\n\r\n    // Перевірка чи потрібно логувати\r\n    _shouldLog(level) {\r\n        const levels = Object.values(LogLevel);\r\n        return levels.indexOf(level) >= levels.indexOf(this.minLevel);\r\n    }\r\n\r\n    // Виведення в консоль\r\n    _consoleLog(level, message, data) {\r\n        const color = LOG_COLORS[level];\r\n        const style = `color: ${color}; font-weight: bold;`;\r\n        \r\n        if (data) {\r\n            console.log(`%c${level}: ${message}`, style, data);\r\n        } else {\r\n            console.log(`%c${level}: ${message}`, style);\r\n        }\r\n    }\r\n\r\n    // Сповіщення слухачів\r\n    _notifyListeners(log) {\r\n        this.listeners.forEach(listener => listener(log));\r\n    }\r\n\r\n    // Методи логування\r\n    debug(message, data = null) {\r\n        this._addLog(LogLevel.DEBUG, message, data);\r\n    }\r\n\r\n    info(message, data = null) {\r\n        this._addLog(LogLevel.INFO, message, data);\r\n    }\r\n\r\n    warning(message, data = null) {\r\n        this._addLog(LogLevel.WARNING, message, data);\r\n    }\r\n\r\n    error(message, data = null) {\r\n        this._addLog(LogLevel.ERROR, message, data);\r\n    }\r\n\r\n    // Отримання всіх логів\r\n    getLogs() {\r\n        return [...this.logs];\r\n    }\r\n\r\n    // Очищення логів\r\n    clearLogs() {\r\n        this.logs = [];\r\n        this._notifyListeners(null); // сповіщення про очищення\r\n    }\r\n\r\n    // Встановлення мінімального рівня логування\r\n    setMinLevel(level) {\r\n        if (Object.values(LogLevel).includes(level)) {\r\n            this.minLevel = level;\r\n        }\r\n    }\r\n\r\n    // Підписка на оновлення логів\r\n    subscribe(listener) {\r\n        this.listeners.add(listener);\r\n        return () => this.listeners.delete(listener); // функція для відписки\r\n    }\r\n\r\n    // Фільтрація логів за рівнем\r\n    filterByLevel(level) {\r\n        return this.logs.filter(log => log.level === level);\r\n    }\r\n\r\n    // Пошук по логах\r\n    search(query) {\r\n        const searchStr = query.toLowerCase();\r\n        return this.logs.filter(log => \r\n            log.message.toLowerCase().includes(searchStr) ||\r\n            (log.data && JSON.stringify(log.data).toLowerCase().includes(searchStr))\r\n        );\r\n    }\r\n}\r\n\r\n// Експортуємо єдиний екземпляр логера\r\nexport const logger = new Logger();\r\n\r\n// Хук для використання логера в компонентах\r\nexport const useLogger = () => {\r\n    const log = (level, message, data = null) => {\r\n        logger.addLog(level, message, data);\r\n    };\r\n\r\n    return {\r\n        log,\r\n        info: (message, data) => log(LogLevel.INFO, message, data),\r\n        warn: (message, data) => log(LogLevel.WARNING, message, data),\r\n        error: (message, data) => log(LogLevel.ERROR, message, data),\r\n        debug: (message, data) => log(LogLevel.DEBUG, message, data),\r\n        getLogs: logger.getLogs,\r\n        clearLogs: logger.clearLogs,\r\n        getLogsByLevel: logger.filterByLevel,\r\n        getRecentLogs: logger.getLogs\r\n    };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}