{"ast":null,"code":"var _jsxFileName = \"C:\\\\files\\\\dev\\\\CPSD\\\\LAB5\\\\frontend\\\\src\\\\components\\\\Graph\\\\Graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { graphApi } from '../../services/api';\nimport { logger } from '../../services/logger';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  onGraphSelect\n}) => {\n  _s();\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    links: []\n  });\n  const graphRef = useRef();\n\n  // Завантаження графа при виборі\n  React.useEffect(() => {\n    const loadGraph = async graphId => {\n      try {\n        const data = await graphApi.getGraph(graphId);\n        if (data) {\n          const formattedData = {\n            nodes: data.nodes.map(node => ({\n              id: node.id,\n              x: node.x,\n              y: node.y\n            })),\n            links: data.edges.map(edge => ({\n              source: edge.source,\n              target: edge.target,\n              weight: edge.weight\n            }))\n          };\n          setGraphData(formattedData);\n          logger.info('Граф завантажено успішно', {\n            graphId\n          });\n        }\n      } catch (error) {\n        logger.error('Помилка при завантаженні графа', error);\n      }\n    };\n    if (onGraphSelect) {\n      loadGraph(onGraphSelect);\n    }\n  }, [onGraphSelect]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white shadow rounded-lg p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"\\u0412\\u0456\\u0437\\u0443\\u0430\\u043B\\u0456\\u0437\\u0430\\u0446\\u0456\\u044F \\u0433\\u0440\\u0430\\u0444\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-[600px] border rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n        ref: graphRef,\n        graphData: graphData,\n        nodeLabel: \"id\",\n        nodeColor: () => '#1a56db',\n        linkColor: () => '#e5e7eb',\n        nodeRelSize: 6,\n        linkWidth: 1,\n        linkDirectionalParticles: 2,\n        linkDirectionalParticleSpeed: 0.005\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"DcgS1D0yxdL8X25whHy2jjrLE0Q=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useState","ForceGraph2D","graphApi","logger","jsxDEV","_jsxDEV","Graph","onGraphSelect","_s","graphData","setGraphData","nodes","links","graphRef","useEffect","loadGraph","graphId","data","getGraph","formattedData","map","node","id","x","y","edges","edge","source","target","weight","info","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","nodeLabel","nodeColor","linkColor","nodeRelSize","linkWidth","linkDirectionalParticles","linkDirectionalParticleSpeed","_c","$RefreshReg$"],"sources":["C:/files/dev/CPSD/LAB5/frontend/src/components/Graph/Graph.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\nimport { graphApi } from '../../services/api';\r\nimport { logger } from '../../services/logger';\r\n\r\nconst Graph = ({ onGraphSelect }) => {\r\n  const [graphData, setGraphData] = useState({ nodes: [], links: [] });\r\n  const graphRef = useRef();\r\n\r\n  // Завантаження графа при виборі\r\n  React.useEffect(() => {\r\n    const loadGraph = async (graphId) => {\r\n      try {\r\n        const data = await graphApi.getGraph(graphId);\r\n        if (data) {\r\n          const formattedData = {\r\n            nodes: data.nodes.map(node => ({\r\n              id: node.id,\r\n              x: node.x,\r\n              y: node.y\r\n            })),\r\n            links: data.edges.map(edge => ({\r\n              source: edge.source,\r\n              target: edge.target,\r\n              weight: edge.weight\r\n            }))\r\n          };\r\n          setGraphData(formattedData);\r\n          logger.info('Граф завантажено успішно', { graphId });\r\n        }\r\n      } catch (error) {\r\n        logger.error('Помилка при завантаженні графа', error);\r\n      }\r\n    };\r\n\r\n    if (onGraphSelect) {\r\n      loadGraph(onGraphSelect);\r\n    }\r\n  }, [onGraphSelect]);\r\n\r\n  return (\r\n    <div className=\"bg-white shadow rounded-lg p-4\">\r\n      <h2 className=\"text-xl font-semibold mb-4\">Візуалізація графа</h2>\r\n      <div className=\"h-[600px] border rounded-lg\">\r\n        <ForceGraph2D\r\n          ref={graphRef}\r\n          graphData={graphData}\r\n          nodeLabel=\"id\"\r\n          nodeColor={() => '#1a56db'}\r\n          linkColor={() => '#e5e7eb'}\r\n          nodeRelSize={6}\r\n          linkWidth={1}\r\n          linkDirectionalParticles={2}\r\n          linkDirectionalParticleSpeed={0.005}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,MAAM,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC;IAAEW,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;EACpE,MAAMC,QAAQ,GAAGd,MAAM,CAAC,CAAC;;EAEzB;EACAD,KAAK,CAACgB,SAAS,CAAC,MAAM;IACpB,MAAMC,SAAS,GAAG,MAAOC,OAAO,IAAK;MACnC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMf,QAAQ,CAACgB,QAAQ,CAACF,OAAO,CAAC;QAC7C,IAAIC,IAAI,EAAE;UACR,MAAME,aAAa,GAAG;YACpBR,KAAK,EAAEM,IAAI,CAACN,KAAK,CAACS,GAAG,CAACC,IAAI,KAAK;cAC7BC,EAAE,EAAED,IAAI,CAACC,EAAE;cACXC,CAAC,EAAEF,IAAI,CAACE,CAAC;cACTC,CAAC,EAAEH,IAAI,CAACG;YACV,CAAC,CAAC,CAAC;YACHZ,KAAK,EAAEK,IAAI,CAACQ,KAAK,CAACL,GAAG,CAACM,IAAI,KAAK;cAC7BC,MAAM,EAAED,IAAI,CAACC,MAAM;cACnBC,MAAM,EAAEF,IAAI,CAACE,MAAM;cACnBC,MAAM,EAAEH,IAAI,CAACG;YACf,CAAC,CAAC;UACJ,CAAC;UACDnB,YAAY,CAACS,aAAa,CAAC;UAC3BhB,MAAM,CAAC2B,IAAI,CAAC,0BAA0B,EAAE;YAAEd;UAAQ,CAAC,CAAC;QACtD;MACF,CAAC,CAAC,OAAOe,KAAK,EAAE;QACd5B,MAAM,CAAC4B,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAED,IAAIxB,aAAa,EAAE;MACjBQ,SAAS,CAACR,aAAa,CAAC;IAC1B;EACF,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,oBACEF,OAAA;IAAK2B,SAAS,EAAC,gCAAgC;IAAAC,QAAA,gBAC7C5B,OAAA;MAAI2B,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClEhC,OAAA;MAAK2B,SAAS,EAAC,6BAA6B;MAAAC,QAAA,eAC1C5B,OAAA,CAACJ,YAAY;QACXqC,GAAG,EAAEzB,QAAS;QACdJ,SAAS,EAAEA,SAAU;QACrB8B,SAAS,EAAC,IAAI;QACdC,SAAS,EAAEA,CAAA,KAAM,SAAU;QAC3BC,SAAS,EAAEA,CAAA,KAAM,SAAU;QAC3BC,WAAW,EAAE,CAAE;QACfC,SAAS,EAAE,CAAE;QACbC,wBAAwB,EAAE,CAAE;QAC5BC,4BAA4B,EAAE;MAAM;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC7B,EAAA,CArDIF,KAAK;AAAAwC,EAAA,GAALxC,KAAK;AAuDX,eAAeA,KAAK;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}