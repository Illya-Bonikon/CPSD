{"ast":null,"code":"import _objectSpread from\"C:/files/dev/CPSD/LAB5/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';import{logger}from'./logger';// Базовий URL API з змінних середовища React\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000';// Створюємо екземпляр axios з базовою конфігурацією\nconst api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Обробник помилок API\nconst handleApiError=(error,context)=>{var _error$response,_error$response$data,_error$response2;const apiError={message:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||error.message||'Помилка API',status:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status,context};logger.error(\"API \\u043F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 (\".concat(context,\"):\"),apiError);throw apiError;};// API для роботи з графами\nexport const graphApi={// Отримати список всіх графів\ngetAllGraphs:async()=>{try{logger.info('Отримання списку графів');const response=await api.get('/graphs');logger.info('Список графів отримано успішно');return response.data;}catch(error){return handleApiError(error,'getAllGraphs');}},// Отримати граф за ID\ngetGraph:async id=>{try{logger.info(\"\\u041E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043D\\u044F \\u0433\\u0440\\u0430\\u0444\\u0443 \\u0437 ID: \".concat(id));const response=await api.get(\"/graphs/\".concat(id));logger.info(\"\\u0413\\u0440\\u0430\\u0444 \\u0437 ID \".concat(id,\" \\u043E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043E \\u0443\\u0441\\u043F\\u0456\\u0448\\u043D\\u043E\"));return response.data;}catch(error){return handleApiError(error,'getGraph');}},// Створити новий граф\ncreateGraph:async graphData=>{try{logger.info('Створення нового графу:',graphData);const response=await api.post('/graphs',graphData);logger.info('Граф створено успішно:',response.data);return response.data;}catch(error){return handleApiError(error,'createGraph');}},// Видалити граф\ndeleteGraph:async id=>{try{logger.info(\"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0435\\u043D\\u043D\\u044F \\u0433\\u0440\\u0430\\u0444\\u0443 \\u0437 ID: \".concat(id));await api.delete(\"/graphs/\".concat(id));logger.info(\"\\u0413\\u0440\\u0430\\u0444 \\u0437 ID \".concat(id,\" \\u0432\\u0438\\u0434\\u0430\\u043B\\u0435\\u043D\\u043E \\u0443\\u0441\\u043F\\u0456\\u0448\\u043D\\u043E\"));}catch(error){return handleApiError(error,'deleteGraph');}}};// API для роботи з алгоритмом\nexport const algorithmApi={// Створити новий запуск алгоритму\ncreateRun:async _ref=>{let{graphId,params}=_ref;try{logger.info('Створення нового запуску алгоритму:',{graphId,params});const response=await api.post('/algorithm/runs',_objectSpread({graph_id:graphId},params));logger.info('Запуск алгоритму створено успішно:',response.data);return response.data;}catch(error){return handleApiError(error,'createRun');}},// Отримати статус запуску\ngetRunStatus:async runId=>{try{logger.info(\"\\u041E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043D\\u044F \\u0441\\u0442\\u0430\\u0442\\u0443\\u0441\\u0443 \\u0437\\u0430\\u043F\\u0443\\u0441\\u043A\\u0443 \\u0437 ID: \".concat(runId));const response=await api.get(\"/algorithm/runs/\".concat(runId,\"/status\"));logger.info(\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441 \\u0437\\u0430\\u043F\\u0443\\u0441\\u043A\\u0443 \\u043E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043E \\u0443\\u0441\\u043F\\u0456\\u0448\\u043D\\u043E:\",response.data);return response.data;}catch(error){return handleApiError(error,'getRunStatus');}},// Отримати результати запуску\ngetRunResults:async runId=>{try{logger.info(\"\\u041E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043D\\u044F \\u0440\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\\u0456\\u0432 \\u0437\\u0430\\u043F\\u0443\\u0441\\u043A\\u0443 \\u0437 ID: \".concat(runId));const response=await api.get(\"/algorithm/runs/\".concat(runId,\"/results\"));logger.info(\"\\u0420\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\\u0438 \\u0437\\u0430\\u043F\\u0443\\u0441\\u043A\\u0443 \\u043E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043E \\u0443\\u0441\\u043F\\u0456\\u0448\\u043D\\u043E:\",response.data);return response.data;}catch(error){return handleApiError(error,'getRunResults');}},// Зупинити запуск\nstopRun:async runId=>{try{logger.info(\"\\u0417\\u0443\\u043F\\u0438\\u043D\\u043A\\u0430 \\u0437\\u0430\\u043F\\u0443\\u0441\\u043A\\u0443 \\u0437 ID: \".concat(runId));await api.post(\"/algorithm/runs/\".concat(runId,\"/stop\"));logger.info(\"\\u0417\\u0430\\u043F\\u0443\\u0441\\u043A \\u0437 ID \".concat(runId,\" \\u0437\\u0443\\u043F\\u0438\\u043D\\u0435\\u043D\\u043E \\u0443\\u0441\\u043F\\u0456\\u0448\\u043D\\u043E\"));}catch(error){return handleApiError(error,'stopRun');}},// Відновити запуск\nresumeRun:async runId=>{try{logger.info(\"\\u0412\\u0456\\u0434\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043D\\u044F \\u0437\\u0430\\u043F\\u0443\\u0441\\u043A\\u0443 \\u0437 ID: \".concat(runId));await api.post(\"/algorithm/runs/\".concat(runId,\"/resume\"));logger.info(\"\\u0417\\u0430\\u043F\\u0443\\u0441\\u043A \\u0437 ID \".concat(runId,\" \\u0432\\u0456\\u0434\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043E \\u0443\\u0441\\u043F\\u0456\\u0448\\u043D\\u043E\"));}catch(error){return handleApiError(error,'resumeRun');}}};","map":{"version":3,"names":["axios","logger","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","handleApiError","error","context","_error$response","_error$response$data","_error$response2","apiError","message","response","data","status","concat","graphApi","getAllGraphs","info","get","getGraph","id","createGraph","graphData","post","deleteGraph","delete","algorithmApi","createRun","_ref","graphId","params","_objectSpread","graph_id","getRunStatus","runId","getRunResults","stopRun","resumeRun"],"sources":["C:/files/dev/CPSD/LAB5/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { logger } from './logger';\r\n\r\n// Базовий URL API з змінних середовища React\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Створюємо екземпляр axios з базовою конфігурацією\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Обробник помилок API\r\nconst handleApiError = (error, context) => {\r\n  const apiError = {\r\n    message: error.response?.data?.message || error.message || 'Помилка API',\r\n    status: error.response?.status,\r\n    context,\r\n  };\r\n  \r\n  logger.error(`API помилка (${context}):`, apiError);\r\n  throw apiError;\r\n};\r\n\r\n// API для роботи з графами\r\nexport const graphApi = {\r\n  // Отримати список всіх графів\r\n  getAllGraphs: async () => {\r\n    try {\r\n      logger.info('Отримання списку графів');\r\n      const response = await api.get('/graphs');\r\n      logger.info('Список графів отримано успішно');\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'getAllGraphs');\r\n    }\r\n  },\r\n\r\n  // Отримати граф за ID\r\n  getGraph: async (id) => {\r\n    try {\r\n      logger.info(`Отримання графу з ID: ${id}`);\r\n      const response = await api.get(`/graphs/${id}`);\r\n      logger.info(`Граф з ID ${id} отримано успішно`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'getGraph');\r\n    }\r\n  },\r\n\r\n  // Створити новий граф\r\n  createGraph: async (graphData) => {\r\n    try {\r\n      logger.info('Створення нового графу:', graphData);\r\n      const response = await api.post('/graphs', graphData);\r\n      logger.info('Граф створено успішно:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'createGraph');\r\n    }\r\n  },\r\n\r\n  // Видалити граф\r\n  deleteGraph: async (id) => {\r\n    try {\r\n      logger.info(`Видалення графу з ID: ${id}`);\r\n      await api.delete(`/graphs/${id}`);\r\n      logger.info(`Граф з ID ${id} видалено успішно`);\r\n    } catch (error) {\r\n      return handleApiError(error, 'deleteGraph');\r\n    }\r\n  },\r\n};\r\n\r\n// API для роботи з алгоритмом\r\nexport const algorithmApi = {\r\n  // Створити новий запуск алгоритму\r\n  createRun: async ({ graphId, params }) => {\r\n    try {\r\n      logger.info('Створення нового запуску алгоритму:', { graphId, params });\r\n      const response = await api.post('/algorithm/runs', {\r\n        graph_id: graphId,\r\n        ...params,\r\n      });\r\n      logger.info('Запуск алгоритму створено успішно:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'createRun');\r\n    }\r\n  },\r\n\r\n  // Отримати статус запуску\r\n  getRunStatus: async (runId) => {\r\n    try {\r\n      logger.info(`Отримання статусу запуску з ID: ${runId}`);\r\n      const response = await api.get(`/algorithm/runs/${runId}/status`);\r\n      logger.info(`Статус запуску отримано успішно:`, response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'getRunStatus');\r\n    }\r\n  },\r\n\r\n  // Отримати результати запуску\r\n  getRunResults: async (runId) => {\r\n    try {\r\n      logger.info(`Отримання результатів запуску з ID: ${runId}`);\r\n      const response = await api.get(`/algorithm/runs/${runId}/results`);\r\n      logger.info(`Результати запуску отримано успішно:`, response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'getRunResults');\r\n    }\r\n  },\r\n\r\n  // Зупинити запуск\r\n  stopRun: async (runId) => {\r\n    try {\r\n      logger.info(`Зупинка запуску з ID: ${runId}`);\r\n      await api.post(`/algorithm/runs/${runId}/stop`);\r\n      logger.info(`Запуск з ID ${runId} зупинено успішно`);\r\n    } catch (error) {\r\n      return handleApiError(error, 'stopRun');\r\n    }\r\n  },\r\n\r\n  // Відновити запуск\r\n  resumeRun: async (runId) => {\r\n    try {\r\n      logger.info(`Відновлення запуску з ID: ${runId}`);\r\n      await api.post(`/algorithm/runs/${runId}/resume`);\r\n      logger.info(`Запуск з ID ${runId} відновлено успішно`);\r\n    } catch (error) {\r\n      return handleApiError(error, 'resumeRun');\r\n    }\r\n  },\r\n}; "],"mappings":"2GAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,MAAM,KAAQ,UAAU,CAEjC;AACA,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,uBAAuB,CAExE;AACA,KAAM,CAAAC,GAAG,CAAGN,KAAK,CAACO,MAAM,CAAC,CACvBC,OAAO,CAAEN,OAAO,CAChBO,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,cAAc,CAAGA,CAACC,KAAK,CAAEC,OAAO,GAAK,KAAAC,eAAA,CAAAC,oBAAA,CAAAC,gBAAA,CACzC,KAAM,CAAAC,QAAQ,CAAG,CACfC,OAAO,CAAE,EAAAJ,eAAA,CAAAF,KAAK,CAACO,QAAQ,UAAAL,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBM,IAAI,UAAAL,oBAAA,iBAApBA,oBAAA,CAAsBG,OAAO,GAAIN,KAAK,CAACM,OAAO,EAAI,aAAa,CACxEG,MAAM,EAAAL,gBAAA,CAAEJ,KAAK,CAACO,QAAQ,UAAAH,gBAAA,iBAAdA,gBAAA,CAAgBK,MAAM,CAC9BR,OACF,CAAC,CAEDX,MAAM,CAACU,KAAK,oDAAAU,MAAA,CAAiBT,OAAO,OAAMI,QAAQ,CAAC,CACnD,KAAM,CAAAA,QAAQ,CAChB,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,QAAQ,CAAG,CACtB;AACAC,YAAY,CAAE,KAAAA,CAAA,GAAY,CACxB,GAAI,CACFtB,MAAM,CAACuB,IAAI,CAAC,yBAAyB,CAAC,CACtC,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAZ,GAAG,CAACmB,GAAG,CAAC,SAAS,CAAC,CACzCxB,MAAM,CAACuB,IAAI,CAAC,gCAAgC,CAAC,CAC7C,MAAO,CAAAN,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOR,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAE,cAAc,CAAC,CAC9C,CACF,CAAC,CAED;AACAe,QAAQ,CAAE,KAAO,CAAAC,EAAE,EAAK,CACtB,GAAI,CACF1B,MAAM,CAACuB,IAAI,qGAAAH,MAAA,CAA0BM,EAAE,CAAE,CAAC,CAC1C,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAZ,GAAG,CAACmB,GAAG,YAAAJ,MAAA,CAAYM,EAAE,CAAE,CAAC,CAC/C1B,MAAM,CAACuB,IAAI,uCAAAH,MAAA,CAAcM,EAAE,gGAAmB,CAAC,CAC/C,MAAO,CAAAT,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOR,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAE,UAAU,CAAC,CAC1C,CACF,CAAC,CAED;AACAiB,WAAW,CAAE,KAAO,CAAAC,SAAS,EAAK,CAChC,GAAI,CACF5B,MAAM,CAACuB,IAAI,CAAC,yBAAyB,CAAEK,SAAS,CAAC,CACjD,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAZ,GAAG,CAACwB,IAAI,CAAC,SAAS,CAAED,SAAS,CAAC,CACrD5B,MAAM,CAACuB,IAAI,CAAC,wBAAwB,CAAEN,QAAQ,CAACC,IAAI,CAAC,CACpD,MAAO,CAAAD,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOR,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAE,aAAa,CAAC,CAC7C,CACF,CAAC,CAED;AACAoB,WAAW,CAAE,KAAO,CAAAJ,EAAE,EAAK,CACzB,GAAI,CACF1B,MAAM,CAACuB,IAAI,qGAAAH,MAAA,CAA0BM,EAAE,CAAE,CAAC,CAC1C,KAAM,CAAArB,GAAG,CAAC0B,MAAM,YAAAX,MAAA,CAAYM,EAAE,CAAE,CAAC,CACjC1B,MAAM,CAACuB,IAAI,uCAAAH,MAAA,CAAcM,EAAE,gGAAmB,CAAC,CACjD,CAAE,MAAOhB,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAE,aAAa,CAAC,CAC7C,CACF,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAsB,YAAY,CAAG,CAC1B;AACAC,SAAS,CAAE,MAAAC,IAAA,EAA+B,IAAxB,CAAEC,OAAO,CAAEC,MAAO,CAAC,CAAAF,IAAA,CACnC,GAAI,CACFlC,MAAM,CAACuB,IAAI,CAAC,qCAAqC,CAAE,CAAEY,OAAO,CAAEC,MAAO,CAAC,CAAC,CACvE,KAAM,CAAAnB,QAAQ,CAAG,KAAM,CAAAZ,GAAG,CAACwB,IAAI,CAAC,iBAAiB,CAAAQ,aAAA,EAC/CC,QAAQ,CAAEH,OAAO,EACdC,MAAM,CACV,CAAC,CACFpC,MAAM,CAACuB,IAAI,CAAC,oCAAoC,CAAEN,QAAQ,CAACC,IAAI,CAAC,CAChE,MAAO,CAAAD,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOR,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAE,WAAW,CAAC,CAC3C,CACF,CAAC,CAED;AACA6B,YAAY,CAAE,KAAO,CAAAC,KAAK,EAAK,CAC7B,GAAI,CACFxC,MAAM,CAACuB,IAAI,4JAAAH,MAAA,CAAoCoB,KAAK,CAAE,CAAC,CACvD,KAAM,CAAAvB,QAAQ,CAAG,KAAM,CAAAZ,GAAG,CAACmB,GAAG,oBAAAJ,MAAA,CAAoBoB,KAAK,WAAS,CAAC,CACjExC,MAAM,CAACuB,IAAI,gLAAqCN,QAAQ,CAACC,IAAI,CAAC,CAC9D,MAAO,CAAAD,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOR,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAE,cAAc,CAAC,CAC9C,CACF,CAAC,CAED;AACA+B,aAAa,CAAE,KAAO,CAAAD,KAAK,EAAK,CAC9B,GAAI,CACFxC,MAAM,CAACuB,IAAI,oLAAAH,MAAA,CAAwCoB,KAAK,CAAE,CAAC,CAC3D,KAAM,CAAAvB,QAAQ,CAAG,KAAM,CAAAZ,GAAG,CAACmB,GAAG,oBAAAJ,MAAA,CAAoBoB,KAAK,YAAU,CAAC,CAClExC,MAAM,CAACuB,IAAI,wMAAyCN,QAAQ,CAACC,IAAI,CAAC,CAClE,MAAO,CAAAD,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOR,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAE,eAAe,CAAC,CAC/C,CACF,CAAC,CAED;AACAgC,OAAO,CAAE,KAAO,CAAAF,KAAK,EAAK,CACxB,GAAI,CACFxC,MAAM,CAACuB,IAAI,qGAAAH,MAAA,CAA0BoB,KAAK,CAAE,CAAC,CAC7C,KAAM,CAAAnC,GAAG,CAACwB,IAAI,oBAAAT,MAAA,CAAoBoB,KAAK,SAAO,CAAC,CAC/CxC,MAAM,CAACuB,IAAI,mDAAAH,MAAA,CAAgBoB,KAAK,gGAAmB,CAAC,CACtD,CAAE,MAAO9B,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAE,SAAS,CAAC,CACzC,CACF,CAAC,CAED;AACAiC,SAAS,CAAE,KAAO,CAAAH,KAAK,EAAK,CAC1B,GAAI,CACFxC,MAAM,CAACuB,IAAI,6HAAAH,MAAA,CAA8BoB,KAAK,CAAE,CAAC,CACjD,KAAM,CAAAnC,GAAG,CAACwB,IAAI,oBAAAT,MAAA,CAAoBoB,KAAK,WAAS,CAAC,CACjDxC,MAAM,CAACuB,IAAI,mDAAAH,MAAA,CAAgBoB,KAAK,4GAAqB,CAAC,CACxD,CAAE,MAAO9B,KAAK,CAAE,CACd,MAAO,CAAAD,cAAc,CAACC,KAAK,CAAE,WAAW,CAAC,CAC3C,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}