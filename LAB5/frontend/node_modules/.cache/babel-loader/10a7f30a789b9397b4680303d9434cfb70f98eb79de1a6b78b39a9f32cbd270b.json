{"ast":null,"code":"var _jsxFileName = \"C:\\\\files\\\\dev\\\\CPSD\\\\LAB5\\\\frontend\\\\src\\\\components\\\\Graph\\\\Graph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { graphApi } from '../../services/api';\nimport { logger } from '../../services/logger';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  onGraphSelect\n}) => {\n  _s();\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    links: []\n  });\n  const [graphs, setGraphs] = useState([]);\n  const [selectedGraphId, setSelectedGraphId] = useState(null);\n  const [error, setError] = useState(null);\n  const graphRef = useRef();\n\n  // Завантаження списку графів при монтуванні компонента\n  useEffect(() => {\n    const loadGraphs = async () => {\n      try {\n        const data = await graphApi.getAllGraphs();\n        setGraphs(data);\n        logger.info('Список графів завантажено успішно');\n      } catch (error) {\n        logger.error('Помилка при завантаженні списку графів', error);\n        setError('Не вдалося завантажити список графів');\n      }\n    };\n    loadGraphs();\n  }, []);\n\n  // Завантаження графа при виборі\n  useEffect(() => {\n    const loadGraph = async graphId => {\n      if (!graphId) return;\n      try {\n        setError(null);\n        const data = await graphApi.getGraph(graphId);\n        if (data) {\n          const formattedData = {\n            nodes: data.nodes.map(node => ({\n              id: node.id,\n              x: node.x,\n              y: node.y\n            })),\n            links: data.edges.map(edge => ({\n              source: edge.source,\n              target: edge.target,\n              weight: edge.weight\n            }))\n          };\n          setGraphData(formattedData);\n          logger.info('Граф завантажено успішно', {\n            graphId\n          });\n        }\n      } catch (error) {\n        logger.error('Помилка при завантаженні графа', error);\n        setError('Не вдалося завантажити граф');\n        setGraphData({\n          nodes: [],\n          links: []\n        });\n      }\n    };\n    if (selectedGraphId) {\n      loadGraph(selectedGraphId);\n    }\n  }, [selectedGraphId]);\n  const handleGraphSelect = graphId => {\n    setSelectedGraphId(graphId);\n    if (onGraphSelect) {\n      onGraphSelect(graphId);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white shadow rounded-lg p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold\",\n        children: \"\\u0412\\u0456\\u0437\\u0443\\u0430\\u043B\\u0456\\u0437\\u0430\\u0446\\u0456\\u044F \\u0433\\u0440\\u0430\\u0444\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-select rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\",\n        value: selectedGraphId || '',\n        onChange: e => handleGraphSelect(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"\\u0412\\u0438\\u0431\\u0435\\u0440\\u0456\\u0442\\u044C \\u0433\\u0440\\u0430\\u0444\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), graphs.map(graph => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: graph.id,\n          children: [\"\\u0413\\u0440\\u0430\\u0444 \", graph.id]\n        }, graph.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 p-4 bg-red-50 text-red-700 rounded-md\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-[600px] border rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n        ref: graphRef,\n        graphData: graphData,\n        nodeLabel: \"id\",\n        nodeColor: () => '#1a56db',\n        linkColor: () => '#e5e7eb',\n        nodeRelSize: 6,\n        linkWidth: 1,\n        linkDirectionalParticles: 2,\n        linkDirectionalParticleSpeed: 0.005\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"t2AgKrMDXTldiAsgROpEHr3D1Sg=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ForceGraph2D","graphApi","logger","jsxDEV","_jsxDEV","Graph","onGraphSelect","_s","graphData","setGraphData","nodes","links","graphs","setGraphs","selectedGraphId","setSelectedGraphId","error","setError","graphRef","loadGraphs","data","getAllGraphs","info","loadGraph","graphId","getGraph","formattedData","map","node","id","x","y","edges","edge","source","target","weight","handleGraphSelect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","graph","ref","nodeLabel","nodeColor","linkColor","nodeRelSize","linkWidth","linkDirectionalParticles","linkDirectionalParticleSpeed","_c","$RefreshReg$"],"sources":["C:/files/dev/CPSD/LAB5/frontend/src/components/Graph/Graph.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\nimport { graphApi } from '../../services/api';\r\nimport { logger } from '../../services/logger';\r\n\r\nconst Graph = ({ onGraphSelect }) => {\r\n  const [graphData, setGraphData] = useState({ nodes: [], links: [] });\r\n  const [graphs, setGraphs] = useState([]);\r\n  const [selectedGraphId, setSelectedGraphId] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const graphRef = useRef();\r\n\r\n  // Завантаження списку графів при монтуванні компонента\r\n  useEffect(() => {\r\n    const loadGraphs = async () => {\r\n      try {\r\n        const data = await graphApi.getAllGraphs();\r\n        setGraphs(data);\r\n        logger.info('Список графів завантажено успішно');\r\n      } catch (error) {\r\n        logger.error('Помилка при завантаженні списку графів', error);\r\n        setError('Не вдалося завантажити список графів');\r\n      }\r\n    };\r\n\r\n    loadGraphs();\r\n  }, []);\r\n\r\n  // Завантаження графа при виборі\r\n  useEffect(() => {\r\n    const loadGraph = async (graphId) => {\r\n      if (!graphId) return;\r\n      \r\n      try {\r\n        setError(null);\r\n        const data = await graphApi.getGraph(graphId);\r\n        if (data) {\r\n          const formattedData = {\r\n            nodes: data.nodes.map(node => ({\r\n              id: node.id,\r\n              x: node.x,\r\n              y: node.y\r\n            })),\r\n            links: data.edges.map(edge => ({\r\n              source: edge.source,\r\n              target: edge.target,\r\n              weight: edge.weight\r\n            }))\r\n          };\r\n          setGraphData(formattedData);\r\n          logger.info('Граф завантажено успішно', { graphId });\r\n        }\r\n      } catch (error) {\r\n        logger.error('Помилка при завантаженні графа', error);\r\n        setError('Не вдалося завантажити граф');\r\n        setGraphData({ nodes: [], links: [] });\r\n      }\r\n    };\r\n\r\n    if (selectedGraphId) {\r\n      loadGraph(selectedGraphId);\r\n    }\r\n  }, [selectedGraphId]);\r\n\r\n  const handleGraphSelect = (graphId) => {\r\n    setSelectedGraphId(graphId);\r\n    if (onGraphSelect) {\r\n      onGraphSelect(graphId);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white shadow rounded-lg p-4\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h2 className=\"text-xl font-semibold\">Візуалізація графа</h2>\r\n        <select\r\n          className=\"form-select rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n          value={selectedGraphId || ''}\r\n          onChange={(e) => handleGraphSelect(e.target.value)}\r\n        >\r\n          <option value=\"\">Виберіть граф</option>\r\n          {graphs.map((graph) => (\r\n            <option key={graph.id} value={graph.id}>\r\n              Граф {graph.id}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      {error && (\r\n        <div className=\"mb-4 p-4 bg-red-50 text-red-700 rounded-md\">\r\n          {error}\r\n        </div>\r\n      )}\r\n      <div className=\"h-[600px] border rounded-lg\">\r\n        <ForceGraph2D\r\n          ref={graphRef}\r\n          graphData={graphData}\r\n          nodeLabel=\"id\"\r\n          nodeColor={() => '#1a56db'}\r\n          linkColor={() => '#e5e7eb'}\r\n          nodeRelSize={6}\r\n          linkWidth={1}\r\n          linkDirectionalParticles={2}\r\n          linkDirectionalParticleSpeed={0.005}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}