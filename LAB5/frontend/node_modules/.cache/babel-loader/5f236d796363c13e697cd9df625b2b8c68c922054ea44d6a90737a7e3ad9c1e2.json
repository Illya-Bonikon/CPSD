{"ast":null,"code":"import axios from 'axios';\nimport { logger } from './logger';\n\n// Базовий URL API з змінних середовища React\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Створюємо екземпляр axios з базовою конфігурацією\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Обробник помилок API\nconst handleApiError = (error, context) => {\n  var _error$response, _error$response$data, _error$response2;\n  const apiError = {\n    message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Помилка API',\n    status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n    context\n  };\n  logger.error(`API помилка (${context}):`, apiError);\n  throw apiError;\n};\n\n// API для роботи з графами\nexport const graphApi = {\n  // Отримати список всіх графів  \n  getAllGraphs: async () => {\n    try {\n      logger.info('Отримання списку графів');\n      const response = await api.get('/graphs');\n      logger.info('Список графів отримано успішно');\n      return response.data;\n    } catch (error) {\n      return handleApiError(error, 'getAllGraphs');\n    }\n  },\n  // Отримати граф за ID\n  getGraph: async id => {\n    try {\n      logger.info(`Отримання графу з ID: ${id}`);\n      const response = await api.get(`/graphs/${id}`);\n      logger.info(`Граф з ID ${id} отримано успішно`);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error, 'getGraph');\n    }\n  },\n  // Створити новий граф\n  createGraph: async graphData => {\n    try {\n      logger.info('Створення нового графу:', graphData);\n      const response = await api.post('/graphs', graphData);\n      logger.info('Граф створено успішно:', response.data);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error, 'createGraph');\n    }\n  },\n  // Видалити граф\n  deleteGraph: async id => {\n    try {\n      logger.info(`Видалення графу з ID: ${id}`);\n      await api.delete(`/graphs/${id}`);\n      logger.info(`Граф з ID ${id} видалено успішно`);\n    } catch (error) {\n      return handleApiError(error, 'deleteGraph');\n    }\n  }\n};\n\n// API для роботи з алгоритмом\nexport const algorithmApi = {\n  // Створити новий запуск алгоритму\n  createRun: async ({\n    graphId,\n    params\n  }) => {\n    try {\n      logger.info('Створення нового запуску алгоритму:', {\n        graphId,\n        params\n      });\n      const response = await api.post('/algorithm/runs', {\n        graph_id: graphId,\n        ...params\n      });\n      logger.info('Запуск алгоритму створено успішно:', response.data);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error, 'createRun');\n    }\n  },\n  // Отримати статус запуску\n  getRunStatus: async runId => {\n    try {\n      logger.info(`Отримання статусу запуску з ID: ${runId}`);\n      const response = await api.get(`/algorithm/runs/${runId}/status`);\n      logger.info(`Статус запуску отримано успішно:`, response.data);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error, 'getRunStatus');\n    }\n  },\n  // Отримати результати запуску\n  getRunResults: async runId => {\n    try {\n      logger.info(`Отримання результатів запуску з ID: ${runId}`);\n      const response = await api.get(`/algorithm/runs/${runId}/results`);\n      logger.info(`Результати запуску отримано успішно:`, response.data);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error, 'getRunResults');\n    }\n  },\n  // Зупинити запуск\n  stopRun: async runId => {\n    try {\n      logger.info(`Зупинка запуску з ID: ${runId}`);\n      await api.post(`/algorithm/runs/${runId}/stop`);\n      logger.info(`Запуск з ID ${runId} зупинено успішно`);\n    } catch (error) {\n      return handleApiError(error, 'stopRun');\n    }\n  },\n  // Відновити запуск\n  resumeRun: async runId => {\n    try {\n      logger.info(`Відновлення запуску з ID: ${runId}`);\n      await api.post(`/algorithm/runs/${runId}/resume`);\n      logger.info(`Запуск з ID ${runId} відновлено успішно`);\n    } catch (error) {\n      return handleApiError(error, 'resumeRun');\n    }\n  }\n};","map":{"version":3,"names":["axios","logger","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","handleApiError","error","context","_error$response","_error$response$data","_error$response2","apiError","message","response","data","status","graphApi","getAllGraphs","info","get","getGraph","id","createGraph","graphData","post","deleteGraph","delete","algorithmApi","createRun","graphId","params","graph_id","getRunStatus","runId","getRunResults","stopRun","resumeRun"],"sources":["C:/files/dev/CPSD/LAB5/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { logger } from './logger';\r\n\r\n// Базовий URL API з змінних середовища React\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Створюємо екземпляр axios з базовою конфігурацією\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Обробник помилок API\r\nconst handleApiError = (error, context) => {\r\n  const apiError = {\r\n    message: error.response?.data?.message || error.message || 'Помилка API',\r\n    status: error.response?.status,\r\n    context,\r\n  };\r\n  \r\n  logger.error(`API помилка (${context}):`, apiError);\r\n  throw apiError;\r\n};\r\n\r\n// API для роботи з графами\r\nexport const graphApi = {\r\n  // Отримати список всіх графів  \r\n  getAllGraphs: async () => {\r\n    try {\r\n      logger.info('Отримання списку графів');\r\n      const response = await api.get('/graphs');\r\n      logger.info('Список графів отримано успішно');\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'getAllGraphs');\r\n    }\r\n  },\r\n\r\n  // Отримати граф за ID\r\n  getGraph: async (id) => {\r\n    try {\r\n      logger.info(`Отримання графу з ID: ${id}`);\r\n      const response = await api.get(`/graphs/${id}`);\r\n      logger.info(`Граф з ID ${id} отримано успішно`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'getGraph');\r\n    }\r\n  },\r\n\r\n  // Створити новий граф\r\n  createGraph: async (graphData) => {\r\n    try {\r\n      logger.info('Створення нового графу:', graphData);\r\n      const response = await api.post('/graphs', graphData);\r\n      logger.info('Граф створено успішно:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'createGraph');\r\n    }\r\n  },\r\n\r\n  // Видалити граф\r\n  deleteGraph: async (id) => {\r\n    try {\r\n      logger.info(`Видалення графу з ID: ${id}`);\r\n      await api.delete(`/graphs/${id}`);\r\n      logger.info(`Граф з ID ${id} видалено успішно`);\r\n    } catch (error) {\r\n      return handleApiError(error, 'deleteGraph');\r\n    }\r\n  },\r\n};\r\n\r\n// API для роботи з алгоритмом\r\nexport const algorithmApi = {\r\n  // Створити новий запуск алгоритму\r\n  createRun: async ({ graphId, params }) => {\r\n    try {\r\n      logger.info('Створення нового запуску алгоритму:', { graphId, params });\r\n      const response = await api.post('/algorithm/runs', {\r\n        graph_id: graphId,\r\n        ...params,\r\n      });\r\n      logger.info('Запуск алгоритму створено успішно:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'createRun');\r\n    }\r\n  },\r\n\r\n  // Отримати статус запуску\r\n  getRunStatus: async (runId) => {\r\n    try {\r\n      logger.info(`Отримання статусу запуску з ID: ${runId}`);\r\n      const response = await api.get(`/algorithm/runs/${runId}/status`);\r\n      logger.info(`Статус запуску отримано успішно:`, response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'getRunStatus');\r\n    }\r\n  },\r\n\r\n  // Отримати результати запуску\r\n  getRunResults: async (runId) => {\r\n    try {\r\n      logger.info(`Отримання результатів запуску з ID: ${runId}`);\r\n      const response = await api.get(`/algorithm/runs/${runId}/results`);\r\n      logger.info(`Результати запуску отримано успішно:`, response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleApiError(error, 'getRunResults');\r\n    }\r\n  },\r\n\r\n  // Зупинити запуск\r\n  stopRun: async (runId) => {\r\n    try {\r\n      logger.info(`Зупинка запуску з ID: ${runId}`);\r\n      await api.post(`/algorithm/runs/${runId}/stop`);\r\n      logger.info(`Запуск з ID ${runId} зупинено успішно`);\r\n    } catch (error) {\r\n      return handleApiError(error, 'stopRun');\r\n    }\r\n  },\r\n\r\n  // Відновити запуск\r\n  resumeRun: async (runId) => {\r\n    try {\r\n      logger.info(`Відновлення запуску з ID: ${runId}`);\r\n      await api.post(`/algorithm/runs/${runId}/resume`);\r\n      logger.info(`Запуск з ID ${runId} відновлено успішно`);\r\n    } catch (error) {\r\n      return handleApiError(error, 'resumeRun');\r\n    }\r\n  },\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}